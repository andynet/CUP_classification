configfile: "config.yaml"

include: "scripts/functions.py"

wildcard_constraints:
    type="normal|tumor"

rule main:
    input:
        expand("{data_dir}/results/{sample}.vcf",
                data_dir = config["data_dir"],
                sample = get_samples(config["normal_file"], config["max_lines"]),
                ),

rule create_bwa_index:
    input:
        config["reference"],
    output:
        expand("{{data_dir}}/reference/{reference}",
                reference = get_ref_base(config["reference"]),
                ),
    shell:
        """
        bwa index -p {output} -a bwtsw {input}
        touch {output}
        """

rule map_reads:
    input:
        get_file_paths,
        expand("{{data_dir}}/reference/{reference}",
                reference = get_ref_base(config["reference"]),
                ),
    output:
        "{data_dir}/{type}/{sample}.sorted.bam",
        temp("{data_dir}/{type}/{sample}.R1.fastq.gz"),
        temp("{data_dir}/{type}/{sample}.R2.fastq.gz"),
    threads:
        config["threads"]
    shell:
        """
        less {input[0]} | sed 's/\.1 / /' | gzip -c > {output[1]}
        less {input[1]} | sed 's/\.2 / /' | gzip -c > {output[2]}

        bwa mem -t {threads} {input[2]} {output[1]} {output[2]}   \
        | samtools sort -@ {threads} - > {output[0]}
        """

rule add_groups:
    input:
        "{data_dir}/{type}/{sample}.sorted.bam",
    output:
        "{data_dir}/{type}/{sample}.grouped.bam",
    shell:
        """
        picard AddOrReplaceReadGroups                                           \
                I={input}                                                       \
                O={output}                                                      \
                RGID=4 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=20
        """

#rule install_gatk:
#    output:
#        "{software_dir}/gatk/gatk",
#    params:
#        "{software_dir}/gatk"
#    shell:
#        """
#        wget https://github.com/broadinstitute/gatk/releases/download/4.0.11.0/gatk-4.0.11.0.zip
#        unzip gatk-4.0.11.0.zip
#        rm gatk-4.0.11.0.zip
#        mv gatk-4.0.11.0 {params}
#        """

rule index_reference:
    input:
        config["reference"]
    output:
        get_indexed_reference(config["reference"]),
    shell:
        """
        samtools faidx {input[0]}

        picard CreateSequenceDictionary                                         \
                    REFERENCE={input[0]}                                        \
                    OUTPUT={output[1]}
        """

rule index_bam:
    input:
        "{data_dir}/{type}/{sample}.grouped.bam",
    output:
        "{data_dir}/{type}/{sample}.grouped.bam.bai",
    shell:
        """
        samtools index {input[0]}
        """

# system specific rule... this is not nice and should be avoided
rule filter_reads:
    input:
        "{data_dir}/{type}/{sample}.grouped.bam",
        "{data_dir}/{type}/{sample}.grouped.bam.bai",
        config["reference"],
        get_indexed_reference(config["reference"]),
    output:
        "{data_dir}/{type}/{sample}.filtered.bam",
    threads:
        config["threads"],
    shell:
        """
        source /com/extra/java/8/load.sh
        source /com/extra/GATK/3.8/load.sh
        gatk                                                                    \
            -T PrintReads                                                       \
            -R {input[2]}                                                       \
            -I {input[0]}                                                       \
            -o {output[0]}                                                      \
            -nct {threads}                                                      \
            --read_filter BadCigar                                              \
            --read_filter DuplicateRead                                         \
            --read_filter FailsVendorQualityCheck                               \
            --read_filter HCMappingQuality                                      \
            --read_filter MappingQualityUnavailable                             \
            --read_filter NotPrimaryAlignment                                   \
            --read_filter UnmappedRead                                          \
            --filter_bases_not_stored                                           \
            --filter_mismatching_base_and_quals
        """

rule convert_bam_to_vcf:
    input:
        "{data_dir}/{type}/{sample}.filtered.bam",
        config["bedfile"],
        config["reference"],
    output:
        "{data_dir}/{type}/{sample}.vcf",
    shell:
        """
        # samtools index {input}

        bcftools mpileup -O u -I -a FORMAT/AD,FORMAT/ADF,FORMAT/ADR             \
            -T {input[1]} -f {input[2]} {input[0]}                              \
        | bcftools view -O u -v snps                                            \
        | bcftools norm -O u -m -                                               \
        | bcftools view -v snps > {output}
        """

rule convert_vcf_to_tsv:
    input:
        "{data_dir}/{type}/{sample}.vcf",
    output:
        "{data_dir}/{type}/{sample}.tsv",
    shell:
        """
        less {input} | grep -v "^#" | cut -d$"\t" -f1,2,4,5 | sort > {output}
        """

rule filter_variants:
    input:
        "{data_dir}/normal/{sample}.tsv",
        "{data_dir}/tumor/{sample}.tsv",
    output:
        "{data_dir}/results/{sample}.tsv",
    shell:
        """
        comm -13 {input[0]} {input[1]} > {output}
        """

rule create_final_vcf:
    input:
        "{data_dir}/results/{sample}.tsv",
        "{data_dir}/tumor/{sample}.vcf"
    output:
        "{data_dir}/results/{sample}.vcf",
    shell:
        """
        <{input[1]} grep "^#" > {output}

        join -j1 -t$"\t" -o1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.10,1.11            \
        <(<{input[1]} grep -v "^#" | awk '{{print $1"-"$2"-"$4"-"$5"\t"$0}}'    \
        | sort -k1,1)                                                           \
        <(<{input[0]} awk '{{print $1"-"$2"-"$3"-"$4"\t"$0}}'                   \
        | sort -k1,1)                                                           \
        >> {output}
        """
